extend type Query {
    me: User!
    user(userId: ID!): User!
    users(pagination: PaginationInput!): UsersPayload
}

extend type Mutation {
    userDemoNotification: Boolean!
    userDelete(userId: ID!): User!
    userCreate(input: UserDataInput!): User!
    userUpdateMe(input: UserDataInput!): User!
    userUpdate(userId: ID!, input: UserDataInput!): User!
}

extend type Subscription {
    userNotification: UserNotification!
}

type User {
    id: ID!
    name: String!
    role: String!
    email: String!
    image: String
    createdAt: String!
    updatedAt: String!
    emailVerified: Boolean!
    accountDisabled: Boolean!
}

input UserDataInput {
    role: Role
    name: String
    email: String
    image: String
    password: String
}

type UsersPayload {
    users: [User!]!
    pagination: PaginationPayload!
}

type UserNotification {
    body: String!
    title: String!
}

enum Role {
    user
    super_admin
}
